# -*- coding: utf-8 -*-
"""Wine_Data_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_moZkHeLgbPJStLhE3h110e0AqwN7oTT
"""

# Import necessary libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Upload the dataset (Google Colab specific)

from google.colab import files
uploaded = files.upload()

# Load the dataset

df = pd.read_csv("winequality.csv", sep=";")
df

"""**Data Overview**"""

# Displaying the shape, info, and summary statistics of the dataset

print("Shape:", df.shape)
df.info()
df.describe()

# Checking for missing values in the dataset

df.isnull().sum()

"""**Class Distribution and Visualization:**"""

# Display the count of each quality score

df['quality'].value_counts().sort_index()

# Plotting the distribution of wine quality using a countplot


sns.countplot(x='quality', data=df, palette='Set2')
plt.title('Wine Quality Distribution')
plt.xlabel('Quality Score')
plt.ylabel('Number of Wines')
plt.show()

"""**Feature Distribution (Visualizing Specific Features):**"""

# List of features you want to visualize
features = ['alcohol', 'pH', 'sulphates', 'residual sugar']

# Create subplots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2 rows, 2 columns
axes = axes.ravel()  # Flatten the axes array for easier iteration

# Loop through the features and plot them in subplots
for i, col in enumerate(features):
    sns.histplot(df[col], kde=True, ax=axes[i])  # 'ax' for subplot placement
    axes[i].set_title(f'Distribution of {col}')

# Adjust layout to avoid overlap
plt.tight_layout()
plt.show()

"""**Binning:**"""

# Binning into 3 classes: Low (3–5), Medium (6), High (7–9)
df['quality_label'] = df['quality'].apply(lambda x: 'low' if x <= 5 else 'medium' if x == 6 else 'high')
df['quality_label'].value_counts()

# Visualize the binned wine quality distribution using a countplot

sns.countplot(x='quality_label', data=df, palette='Set3')
plt.title('Binned Wine Quality Distribution')
plt.xlabel('Quality Category')
plt.ylabel('Number of Wines')
plt.show()

"""**Correlation Analysis:**"""

# Encode quality_label to numeric for correlation
df_corr = df.copy()
df_corr['quality_label_num'] = df_corr['quality_label'].map({'low': 0, 'medium': 1, 'high': 2})
corr = df_corr.corr(numeric_only=True)

# Plot correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr[['quality_label_num']].sort_values(by='quality_label_num', ascending=False), annot=True, cmap='coolwarm')
plt.title('Correlation with Quality Label')
plt.show()

"""**Outlier Detection**"""

# List of numerical features
numerical_features = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
                      'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
                      'pH', 'sulphates', 'alcohol']

# Plotting boxplots to detect outliers
plt.figure(figsize=(15, 12))
for i, feature in enumerate(numerical_features):
    plt.subplot(4, 3, i + 1)  # 4 rows, 3 columns
    sns.boxplot(data=df, x=feature)
    plt.title(f'Boxplot of {feature}')

plt.tight_layout()
plt.show()

"""**Pair Plot**:
focusing on the key features and their relationship to the quality labels.
"""

# Pair plot for key features
sns.pairplot(df[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'alcohol', 'quality']])
plt.suptitle("Pairplot of Selected Features with Quality", y=1.02)
plt.show()

"""Target vs Feature Visualization"""

# Boxplots showing the relationship between selected features and the quality label

plt.figure(figsize=(15, 12))

for i, col in enumerate(features):
    plt.subplot(3, 2, i + 1)
    sns.boxplot(x='quality_label', y=col, data=df)
    plt.title(f'{col} vs Quality Label')

plt.tight_layout()
plt.show()

"""Feature Distributions"""

# Show skewness and kurtosis for each feature
from scipy.stats import skew, kurtosis

skewness = df[numerical_features].apply(lambda x: skew(x))
kurt = df[numerical_features].apply(lambda x: kurtosis(x))

print(f"Skewness:\n{skewness}\n")
print(f"Kurtosis:\n{kurt}")